public class Base {

    public static void main(String[] args) throws URISyntaxException, IOException {
        Random random=new Random();

        List<float[]> datasTrain = new ArrayList<>();
        datasTrain.add(new float[]{1F, 1F});
        datasTrain.add(new float[]{0F, 1F});
        datasTrain.add(new float[]{1F, 0F});
        datasTrain.add(new float[]{0F, 0F});
        List<float[]> targetsTrain = new ArrayList<>();
        targetsTrain.add(new float[]{0F});
        targetsTrain.add(new float[]{1F});
        targetsTrain.add(new float[]{1F});
        targetsTrain.add(new float[]{0F});
        /*for(int i=0; i<100; i++){
            float[] fl = new float[2];
            fl[0]= random.nextFloat() > 0.5F ? 1 :0;
            fl[1]= random.nextFloat() > 0.5F ? 1 :0;
            datasTrain.add(fl);

            float[] ol = new float[1];
            if (fl[0]==0 && fl[1]==0)
                ol[0]=0;
            if (fl[0]==1 && fl[1]==1)
                ol[0]=0;
            if (fl[0]==1 && fl[1]==0)
                ol[0]=1;
            if (fl[0]==0 && fl[1]==1)
                ol[0]=1;
            targetsTrain.add(ol);
        }*/


        List<float[]> datasTest = new ArrayList<>();
        datasTest.add(new float[]{1F, 1F});
        datasTest.add(new float[]{0F, 1F});
        datasTest.add(new float[]{1F, 0F});
        datasTest.add(new float[]{0F, 0F});
        List<float[]> targetsTest = new ArrayList<>();
        targetsTest.add(new float[]{0F});
        targetsTest.add(new float[]{1F});
        targetsTest.add(new float[]{1F});
        targetsTest.add(new float[]{0F});


        Layer inputLayer = Layer.createLayerInput(2, FunEnum.NONE, true);
        Layer hiddenLayer = Layer.createLayerHidden(4, FunEnum.SIGMOID, inputLayer, true);
        Layer outputLayer = Layer.createLayerOutput(1, FunEnum.SIGMOID, hiddenLayer);
        List<Neiro> list= new LinkedList<>();
        list.addAll(inputLayer.neiros);
        list.addAll(hiddenLayer.neiros);
        list.addAll(outputLayer.neiros);
        Net net = new Net(list);
        net.trains(datasTrain, targetsTrain,0.5F, 0.01F,10000, 0.01F);



        //Тестирование
        Integer countError = 0;
        //прогоним через тестовый набор и посчитаем количество ошибок
        for (int i = 0; i < targetsTest.size(); i++) {
            float[] output = net.calculate(datasTest.get(i), 1);
            System.out.println("targetResult="+targetsTest.get(i)[0]+", outputResult="+output[0]);

            if (Math.abs(output[0]- targetsTest.get(i)[0])>0.2) {
                countError++;
            }
        }
        Integer len = targetsTest.size();
        float eff = (float) (len - countError) / len;
        System.out.println("eff=" + eff);

        //Net.save("net_xor", net, eff);
    }
}



Крайне любопытно что при двух нейронах в скрытом слое добиться 1-ы в эффективности можно только случайно. Тогда как уже при 4-х она получается стабильно.

Также очень важно количество эпох: примерно 3000 - 4000. При этом скорость обучения и момент особой роли не играют